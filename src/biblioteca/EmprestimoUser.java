/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package biblioteca;

import conexao.Conexao;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tabelas.RenderizaAcao;
import tabelas.RenderizacaoBtnAcao;
import tabelas.TabelaEmprestimo;
import tabelas.TabelaLivro;
import tabelas.TabelaUsuario;

/**
 *
 * @author Gabriel Oliveira
 */
public class EmprestimoUser extends javax.swing.JPanel {

    /**
     * Creates new form EmprestimoUser
     */
    
    Conexao con_cliente;
    
    public EmprestimoUser(int id) {
        initComponents();
        
        con_cliente = new Conexao(); // inicialização do objeto
        con_cliente.conecta(); // chama o método que conecta
        
        tabela1.setShowHorizontalLines(true);
        tabela1.setGridColor(new Color(230, 230, 230));
        tabela1.setRowHeight(40);
        tabela1.getTableHeader().setReorderingAllowed(false);
        
        preencherTabela(id);
    }

     private void preencherTabela(int id) {
        String[] codLivros = new String[3];
        String[] dataEmissao = new String[3];
        String[] dataDevolucao = new String[3];
        String[] multa = new String[3];
        int i = 0;   
        con_cliente.executaSQL("select * from empresta_livro where Id_Usuario = " + id);
         
        tabela1.getColumnModel().getColumn(0);
        tabela1.getColumnModel().getColumn(1);
        tabela1.getColumnModel().getColumn(2);
        tabela1.getColumnModel().getColumn(3);
        
        DefaultTableModel modelo = (DefaultTableModel) tabela1.getModel();
        modelo.setNumRows(0);
        
        try {
            con_cliente.resultset.beforeFirst();
            while(con_cliente.resultset.next()) {
                codLivros[i] = con_cliente.resultset.getString("Cod_Livro");
                dataEmissao[i] = con_cliente.resultset.getString("Data_Emissao");
                dataDevolucao[i] = con_cliente.resultset.getString("Data_Devolucao");
                i++;
            }
            i = 0;
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "\n Erro ao listar dados da tabela!!:\n" + erro,"Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
        }
             
        multa = calculandoMulta(dataDevolucao);
        
        for (String codLivro : codLivros) {
            if (codLivro != null) {
                con_cliente.executaSQL("select * from livro where Cod_Livro = " + codLivro);
                try {
                con_cliente.resultset.beforeFirst();
                while(con_cliente.resultset.next()) {
                    modelo.addRow(new Object[]{
                        con_cliente.resultset.getString("Titulo"),
                        dataEmissao[i],
                        dataDevolucao[i],
                        multa[i]
                    });
                    i++;
                }
                } catch (SQLException erro) {
                    JOptionPane.showMessageDialog(null, "\n Erro ao listar dados da tabela!!:\n" + erro,"Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        
    }
     
     private String[] calculandoMulta(String[] devolucao) {
         String[] multas = new String[3];
         
            for (int cont = 0; cont < 3; cont++) {
                if(devolucao[cont] != null){
                    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                    Date dataEmprestimo = null;
                    try {
                        dataEmprestimo = formato.parse(devolucao[cont]);
                    } catch (ParseException ex) {
                        Logger.getLogger(TabelaEmprestimo.class.getName()).log(Level.SEVERE, "erro", ex);
                    }
                    Date dataAtual = new Date();    

                    long diferencaMs = dataAtual.getTime() - dataEmprestimo.getTime();
                    long diferenca = TimeUnit.DAYS.convert(diferencaMs, TimeUnit.MILLISECONDS);
                    double multa = diferenca * 1.5;

                    if(multa > 0){
                        multas[cont] = "R$ " + multa;
                    }
                }
        }
        return multas;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela1 = new tabelas.Tabela();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(900, 800));
        setMinimumSize(new java.awt.Dimension(900, 800));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Meu Emprestimos:");

        tabela1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Titulo do Livro", "Data de Emissão", "Data de Devolução", "Valor da multa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabela1);
        if (tabela1.getColumnModel().getColumnCount() > 0) {
            tabela1.getColumnModel().getColumn(0).setResizable(false);
            tabela1.getColumnModel().getColumn(1).setResizable(false);
            tabela1.getColumnModel().getColumn(2).setResizable(false);
            tabela1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(318, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(288, 288, 288))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(83, 83, 83)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(481, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private tabelas.Tabela tabela1;
    // End of variables declaration//GEN-END:variables
}
